generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sessions      Session[]
  accounts      Account[]
  properties    Property[] @relation("UserProperties")
  bookings      Booking[]  @relation("UserBookings")
  wishlists     Wishlist[]
  reviews       Review[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Property {
  id            String          @id @default(cuid())
  title         String
  description   String
  slug          String          @unique
  pricePerNight Float
  cleaningFee   Float?
  serviceFee    Float?
  latitude      Float?
  longitude     Float?
  type          String
  roomType      String
  guestCount    Int
  bedroomCount  Int
  bathroomCount Int
  amenities     String[]
  rules         String[]
  country       String
  city          String
  address       String
  rating        Float?
  ownerId       String
  owner         User            @relation("UserProperties", fields: [ownerId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  wishlists     Wishlist[]
  reviews       Review[]
  images        PropertyImage[] @relation("PropertyImages")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("property")
}

model PropertyImage {
  id          String   @id @default(cuid())
  url         String
  order       Int
  blurDataUrl String
  propertyId  String
  property    Property @relation("PropertyImages", fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, order])
  @@map("property_image")
}

model Booking {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("booking")
}

model Wishlist {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("wishlist")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("review")
}
